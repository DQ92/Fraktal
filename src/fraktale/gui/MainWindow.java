package fraktale.gui;

import fraktale.operating.Fractal;
import fraktale.operating.Julii;
import fraktale.operating.Mandelbrot;
import fraktale.operating.MandelbrotIII;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Daniel
 */
public class MainWindow extends JFrame implements MouseMotionListener, MouseListener {

    private static final int WIDTH = 800;
    private static final int HEIGHT = 600;
    
    private final Mandelbrot mMandelbrot;
    private final Julii mJulii;
    private final MandelbrotIII mMandelbrotIII;
    private final Fractal mFractal;    
    
    // max value in TextField
    private static final int MAX_TO_COMPUTE = 10000;
    
    protected BufferedImage img;
    
    int x1, x2, y1, y2;
    

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        super("Fraktale");

        initComponents();
        setVisible(true);
        setResizable(false);
        setBounds(50, 15, WIDTH, HEIGHT);

        jProgressBar1.setVisible(false);

        jTextFieldMax.setToolTipText("zoom");
        jLabel.addMouseListener(this);
        jLabel.addMouseMotionListener(this);

        mFractal = new Fractal(jProgressBar1, jLabel);
        mFractal.setSize(WIDTH, HEIGHT);
        
        img = new BufferedImage(WIDTH, 480, BufferedImage.TYPE_INT_RGB);
        
        mMandelbrot = new Mandelbrot(jProgressBar1, jLabel, img);
        mJulii = new Julii(jProgressBar1, jLabel, img);
        mMandelbrotIII = new MandelbrotIII(jProgressBar1, jLabel, img);
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButtonStart = new javax.swing.JButton();
        jTextFieldMax = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jButtonSave = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fraktale");
        setResizable(false);

        jLabel.setPreferredSize(new java.awt.Dimension(800, 480));

        jPanel1.setPreferredSize(new java.awt.Dimension(800, 50));

        jButtonStart.setText("Start");
        jButtonStart.setPreferredSize(new java.awt.Dimension(80, 20));
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        jTextFieldMax.setText("20");
        jTextFieldMax.setMaximumSize(new java.awt.Dimension(50, 20));
        jTextFieldMax.setName(""); // NOI18N
        jTextFieldMax.setPreferredSize(new java.awt.Dimension(50, 20));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Mandelbrot", "Julii" , "Mandelbrot Cubic", "Mandelbrot Quadratur", "Mandelbrot Penta" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButtonSave.setText("Zapisz");
        jButtonSave.setPreferredSize(new java.awt.Dimension(80, 20));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jButton1.setText("Info");
        jButton1.setPreferredSize(new java.awt.Dimension(80, 20));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Max przybli≈ºenie");
        jLabel1.setMaximumSize(new java.awt.Dimension(99, 14));
        jLabel1.setMinimumSize(new java.awt.Dimension(90, 20));
        jLabel1.setPreferredSize(new java.awt.Dimension(90, 20));

        jLabel2.setText("Metoda:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11))
        );

        jProgressBar1.setFocusable(false);
        jProgressBar1.setPreferredSize(new java.awt.Dimension(146, 20));
        jProgressBar1.setRequestFocusEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 850, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        startRender(null);
    }//GEN-LAST:event_jButtonStartActionPerformed

    
    /**
     * Saving generated image as PNG from buffer.
     *
     * @param evt
     */
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed

        String method = (String) jComboBox1.getSelectedItem();

        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
        Date date = new Date();
        String time = dateFormat.format(date);

        File f = new File(method + "_" + time + ".png");
        try {
            ImageIO.write(img, "PNG", f);

            String path = f.getAbsolutePath();
            JOptionPane.showMessageDialog(this, "Zapisano w: " + path, "Zapisano", JOptionPane.INFORMATION_MESSAGE);

        } catch (IOException | NullPointerException | IllegalArgumentException e1) {
            JOptionPane.showMessageDialog(this, "B≈ÇƒÖd w trakcie zapisywania. \n" + e1, "B≈ÇƒÖd", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JOptionPane.showMessageDialog(this, 
                  "Program po wybraniu jednej z dw√≥ch metod \n"
                + "i naci≈õnieciu przycisku Start generuje fraktal. \n\n"
                + "Aby przybli≈ºyƒá nale≈ºy uzyc LPM i przeciagnac. \n"
                + "PPM resetuje ustawienia i generuje fraktal \n"
                + "z warto≈õciami domyslnymi."
                + "\n \n"
                + "                    Program wykonali:\n"
                + "             Kuta Daniel, ≈Åoboda Pawe≈Ç \n"
                + "                          PWSZ 2015", 
                  "O aplikacji", JOptionPane.OK_OPTION);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed


    @Override
    public void mouseDragged(MouseEvent e) {
        x2 = e.getX();
        y2 = e.getY();

        repaint();
    }

    @Override
    public void mouseMoved(MouseEvent e) {}

    @Override
    public void mouseClicked(MouseEvent e) {
        // right btn
        if (e.getButton() == MouseEvent.BUTTON3) {
            resetValues();
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
        x1 = e.getX();
        y1 = e.getY();
    }

    
    @Override
    public void mouseReleased(MouseEvent e) {
        x2 = e.getX();
        y2 = e.getY();

        int x = (x1 + x2) / 2;
        int y = (y1 + y2) / 2;
         
        startRender(new Point(x, y));
    }

    /**
     * Start render choosen fractal in Thread
     * @param p 
     */
    public void startRender(Point p){
        
        String method = (String) jComboBox1.getSelectedItem();
        
        int i = getMaxIterFromText();
        if (i > MAX_TO_COMPUTE) {
            JOptionPane.showMessageDialog(this, "Warto≈õƒá " + i + " jest zbyt du≈ºa.", 
                                                    "B≈ÇƒÖd", JOptionPane.ERROR_MESSAGE);
            return;
            
        }

        switch (method) {
            case "Mandelbrot":
                mMandelbrot.setMaxIter(i);
                if(p!=null)
                    mMandelbrot.setView(p, i, true);    
                else
                    mMandelbrot.resetValues();
                new Thread(mMandelbrot).start();
                
            break;
                
            case "Julii":
                mJulii.setMaxIter(i);
                if (p != null)
                    mJulii.setView(p, i, true);
                else
                    mJulii.resetValues();              
                new Thread(mJulii).start();
                
            break;
               case "Mandelbrot Cubic":
                mMandelbrotIII.setMaxIter(i);
                if (p != null) {
                    mMandelbrotIII.setView(p, i, true);
                } else {
                    mMandelbrotIII.resetValues();
                }
                mMandelbrotIII.setLevel(2);
                new Thread(mMandelbrotIII).start();

            break; 
                   
            case "Mandelbrot Quadratur":
                mMandelbrotIII.setMaxIter(i);
                if (p != null) {
                    mMandelbrotIII.setView(p, i, true);
                } else {
                    mMandelbrotIII.resetValues();
                }
                mMandelbrotIII.setLevel(3);
                new Thread(mMandelbrotIII).start();

            break;
                
            case "Mandelbrot Penta":
                mMandelbrotIII.setMaxIter(i);
                if (p != null) {
                    mMandelbrotIII.setView(p, i, true);
                } else {
                    mMandelbrotIII.resetValues();
                }
                mMandelbrotIII.setLevel(4);
                new Thread(mMandelbrotIII).start();

            break;
                   
        }
    }
    
    
    private void resetValues() {
        String method = (String) jComboBox1.getSelectedItem();
        jTextFieldMax.setText("20");

        switch (method) {
            case "Mandelbrot":
                mMandelbrot.resetValues();

                new Thread(mMandelbrot).start();
            break;

            case "Julii":
                mJulii.resetValues();
                
                new Thread(mJulii).start();
            break;
                
            case "Mandelbrot Cubic":
                mMandelbrotIII.resetValues();
                mMandelbrotIII.setLevel(2);
                new Thread(mMandelbrotIII).start();

            break;

            case "Mandelbrot Quadratur":
                mMandelbrotIII.resetValues();
                mMandelbrotIII.setLevel(3);
                new Thread(mMandelbrotIII).start();

            break;

            case "Mandelbrot Penta":
                mMandelbrotIII.resetValues();
                mMandelbrotIII.setLevel(4);
                new Thread(mMandelbrotIII).start();

            break;
        }   
    }
    
    
    @Override
    public void mouseEntered(MouseEvent e) { }

    @Override
    public void mouseExited(MouseEvent e) {}

    
    @Override
    public void paint(final Graphics g) {
        super.paint(g); // clear the frame surface 

        g.setColor(Color.WHITE);

        if (x1 != x2 && y1 != y2) {
            /* make sure that selection area has the same ratio as original area */
            if (WIDTH / HEIGHT < Math.abs(x1 - x2) / Math.abs(y1 - y2)) {
                y2 = y1 + sgn(y2 - y1) * HEIGHT * Math.abs(x1 - x2) / WIDTH;
            } else {
                x2 = x1 + sgn(x2 - x1) * WIDTH * Math.abs(y1 - y2) / HEIGHT;
            }
        }

        g.setColor(Color.BLUE);
        g.drawRect(Math.min(x1, x2), Math.min(y1, y2), Math.abs(x2 - x1), Math.abs(y2 - y1));
   }

    
    public int sgn(int x) {
        if (x > 0) {
            return 1;
        } else if (x < 0) {
            return -1;
        } else {
            return 0;
        }
    }

    
    public int getMaxIterFromText() {
        try {
            return Integer.valueOf(jTextFieldMax.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Wprowadzono warto≈õƒá jest niepoprawna!.", "B≈ÇƒÖd", JOptionPane.ERROR_MESSAGE);
        }
        return 0;
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTextField jTextFieldMax;
    // End of variables declaration//GEN-END:variables
 
}
